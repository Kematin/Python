#Диапозон

numbers = list(range(10)) #Лист предназначен для выведение в список, а не диапозонный элемент
print(numbers)
#list = список

n = list(range(10, 30, 2)) #Первое число начало диапозона, второе конец, а третье это шаговой диапозон.
print(n)

#Итерация цикла
a = [1, 2, 4, 5, 7, 8]
i = 0
length = len(a) - 1                     #Сложный способ
while i <= length:   
	print(str(a[i]) + "!")            
	i += 1


for el in a:                             #Лёгкий способ 
	print(el)


for chi in range(3):
	print("Слово выведится столько раз сколько было указано в рендж")



#Своя функция

def spam():
	print("spaaaaaaaaaaaaaaam" * 5)
	
spam()

#Присвоение аргумента

def multi(inte):
	print(inte * 10)
	
multi(5)

#Возвращение числа
def min(a, b):
	if a > b:
		return b
	else:
		return a
a = int(input("Первое число "))
b = int(input("Второе число "))


print("Наименьшее число - " + str(min(a, b)))


#Модули
import random 
print(random.randint(1, 10))

for ran in range(10):
	print(random.randint(1, 90))


from random import randint #С помощью From импортируем определённую функцию или переменную
from random import * #В этом случае импортируется все функции и переменные и мы можем использовать их на прямую

from math import *
from math import sqrt, pi #Можно импортировать несколько функций и переменных
from math import ceil as up #Можно переминовывать функции и переменные

print(sqrt(25))
print(pi)
print(up(1.3))

#STL - cтандартная библиотека модулей
#Pip - команда чтобы скачать библиотеки с PyPi
#Prebuild Binaries чтобы скачать большие модули в формате .exe



#Поведение исключений

#ImportError - нет библиотеки в питоне
#IndexError - пытаться получить доступ к ячейке который нет
#SyntaxError - ошибка синтакса, неправильное написание кода
#NameError - использование несуществующей переменной 
#TypeError - несовместимый аргумент с функцией или другим аргументов (например int и str)
#ValueError - когда например программа ожидает выдачи bool, а вы засовываете str

#Как взять вверх над ошибкой 

try:
	print(10 / 0)  
except ZeroDivisionError: #Можно не вписывать ошибку, а просто пропуск, тогда поймаются все ошибки
	pass #Пропуститься ошибка


print("Проге конец")

#Произвольный код

#try:
	#eval("fajkfajf"afav)
#except SyntaxError:
	#print("Найдна ошибка в синтаксе кода")


#Так-же можно создать список для поимки ошибок

try:
	print(numbers / 0)
except(NameError, ZeroDivisionError, TypeError):
	print("Была найдена одна из ошибок: Несуществующая переменная, деление на ноль, неправльное конткатенирование аргументов")
finally:
	print("Были найдены все исключения, конец") #Будет выводится не смотря на кол-во или название ошибки(даже если её нет)


#Raise (придаёт своё значение какой то ошибке)
try:
	pogoda = "Зима"
	if pogoda != "Лето":            #Полезно при создание своих библиотек
		raise ValueError("Погода плохая")    #Дополнение к своей  (объяснение)
except ValueError:
	print("Найдено исключение ValueError")



#Создание своих исключений
		#class my_error(Exception):
			#pass #Здесь должны учитываться поведение, условия и т.д. исключений
		#raise my_error("*Ошибка библиотеки*")


#assert
def exc0(text): 
	#assert != "" выведится ошибка AssertionError
	print(str(text)+ "!")


exc0("Всем привет")

def number(n):
	assert n > 0, "Число должно быть больше нуля"#Проще говоря assert даёт функции утверждения как if, 
	#											  то-есть если значение не подходит 
	#								              утверждению, то выведится ошибка, которая представлена выше	
	print(float(n) + "- число")


#Работа с файлами

#file = open("text.txt", "r")

#print(file.read())

#file.close()

#Режимы чтения файла. 
#Основные: 
#r - чтение файлы, 
#w - перезапись файла, 
#a - добавление в файл. 
#Дополнительный: b - Binary mode




#None и Dictionary
#Тип данных - None обозначает пустоту
test = None
test2 = ""          #Одинаковы
test3 = 0

#Dictionary - в переводе список *

ts = {
	"ключ 1" : "значени №1",            #То-есть чтобы получить доступ к значению, нужен ввод ключа
	"ключ 2" : "значени №2",			#Так-же у ключа может быть что угодно, от переменной, до списка
	123 : (1,2,3,4,5),				
	"фалз" : False,
	"нан" : None,
	"Дополнительный список" : {
	"Список2" : "Список в списке"
	}
}

tsname = input("Введите ключ: ")

if tsname in ts:
	print("Значение - " + str(tsname) + " существует" + "\n" + str(ts[tsname]))


try:
	ts[tsname]
except KeyError:
	print("ключа " + tsname + " не существует!")

#Метод get

names = {
	"Рафаэль" : "Агишев",
	"Дмитрий" : "Остапчук",
	"Александра" : "Мурас"

}
print(names.get("Абрахам", "Человека в списке нет")) #Отличие в том, если ключа нет, возращает None
                                                     #Так-же можно добавить надпись, в случае исключения 
print(names["Александра"]





